#!/opt/bin/ruby

LOGFILE='/tmp/openvpn-pair-hook.log'
PAIRDIR='/home/pair'
DBPATH=PAIRDIR + '/openvpn-ips.db'
TABLENAME='connections'

require 'logger'
require 'rubygems'
require 'sqlite3'

# TODO: merge with pptp hook for a common lib thingy

def initdb
  sql = "CREATE TABLE IF NOT EXISTS #{TABLENAME}(id integer primary key,ip TEXT, name TEXT, state BOOLEAN default 0, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"
  @db.execute(sql)
end

def addip(ip=nil,name=nil)
  return if ip.nil? or name.nil?
  sql = "INSERT INTO #{TABLENAME} (ip,name,state) values (?,?,1)"
  stmt = @db.prepare(sql)
  stmt.bind_params(ip,name)
  stmt.execute
end

def setdisconnected(ip=nil)
  return if ip.nil?
  sql = "UPDATE #{TABLENAME} SET state = 0 WHERE ip = ?"
  stmt = @db.prepare(sql)
  stmt.bind_params(ip)
  stmt.execute
end

def removeip(ip=nil)
  return if ip.nil?
  sql = "DELETE FROM #{TABLENAME} WHERE ip = ?"
  stmt = @db.prepare(sql)
  stmt.bind_params(ip)
  stmt.execute
end

log = Logger.new(LOGFILE)

unless File.exists?(PAIRDIR)
  log.fatal "pair-hook" "#{PAIRDIR} does not exist!"
  exit 0
end

@db = SQLite3::Database.new(DBPATH)
initdb

if ENV['ifconfig_pool_remote_ip'].nil? or ENV['script_type'].nil?
  puts "Could not find script type or remote ip"
  log.fatal "pair-hook" "Could not find script type or remote ip in environment variables!"
  exit 0
end

case ENV['script_type']
when 'client-connect'
  addip(ENV['ifconfig_pool_remote_ip'], ENV['common_name'])
when 'client-disconnect'
  removeip(ENV['ifconfig_pool_remote_ip'])
else
  puts "#{script_type} not handled"
  log.fatal "pair-hook" "#{script_type} not handled"
end

exit 0
